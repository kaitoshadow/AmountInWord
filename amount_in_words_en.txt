create or replace FUNCTION amount_in_words_en (
i_amt IN NUMBER,
curr IN VARCHAR2
) RETURN VARCHAR2 IS

n_dollar NUMBER;
n_cents NUMBER;

FUNCTION check_if_single (
i_num IN NUMBER,
currency IN VARCHAR2
) RETURN VARCHAR2 IS

FUNCTION n_spell (
i_num IN NUMBER
) RETURN VARCHAR2 AS

TYPE w_array IS
TABLE OF VARCHAR2(255);
l_str w_array := w_array('', ' thousand ', ' million ', ' billion ', ' trillion ',
' quadrillion ', ' quintillion ', ' sextillion ', ' septillion ', ' octillion ',
' nonillion ', ' decillion ', ' undecillion ', ' duodecillion ');
l_num VARCHAR2(50) DEFAULT trunc(i_num);
l_is_negative BOOLEAN := false;
l_return VARCHAR2(4000);
BEGIN
IF sign(i_num) = -1 THEN
l_is_negative := true;
l_num := trunc(abs(i_num));
END IF;

FOR i IN 1..l_str.count LOOP
EXIT WHEN l_num IS NULL;
IF ( substr(l_num, length(l_num) - 2, 3) <> 0 ) THEN
l_return := to_char(to_date(substr(l_num, length(l_num) - 2, 3), 'J'), 'Jsp')
|| l_str(i)
|| l_return;

END IF;

l_num := substr(l_num, 1, length(l_num) - 3);
END LOOP;

IF NOT l_is_negative THEN
RETURN initcap(l_return);
ELSE
RETURN 'Negative ' || initcap(l_return);
END IF;

END n_spell;

BEGIN
IF i_num = 1 THEN
RETURN 'One ' || currency;
ELSE
RETURN n_spell(i_num)
|| ' '
|| currency;
END IF;
END check_if_single;

BEGIN
IF i_amt IS NULL THEN
RETURN '';
END IF;
n_dollar := trunc(i_amt);
n_cents := ( abs(i_amt) - trunc(abs(i_amt)) ) * 100;

IF nvl(n_cents, 0) > 0 THEN
RETURN check_if_single(n_dollar, currency_in_words(curr, 'en'))
|| ' and '
|| check_if_single(n_cents, min_currency_in_words(curr, 'en'));
ELSE
RETURN check_if_single(n_dollar, currency_in_words(curr, 'en'));
END IF;

END amount_in_words_en;